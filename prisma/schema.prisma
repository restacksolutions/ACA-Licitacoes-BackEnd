generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleCompany {
  owner
  admin
  member
}

enum LicitacaoStatus {
  draft
  open
  closed
  cancelled
  awarded
}

model AppUser {
  id           String          @id @default(uuid())
  email        String          @unique
  passwordHash String          @map("password_hash")
  fullName     String?         @map("full_name")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  memberships  CompanyMember[]
  companies    Company[]       @relation("CompanyCreatedBy")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  cnpj        String   @unique
  active      Boolean  @default(true)
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  createdBy  AppUser           @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  members    CompanyMember[]
  documents  CompanyDocument[]
  licitacoes Licitacao[]
}

model CompanyMember {
  id        String      @id @default(uuid())
  companyId String      @map("company_id")
  userId    String      @map("user_id")
  role      RoleCompany
  createdAt DateTime    @default(now()) @map("created_at")

  company Company @relation(fields: [companyId], references: [id])
  user    AppUser @relation(fields: [userId], references: [id])

  @@unique([companyId, userId])
}

model CompanyDocument {
  id         String @id @default(uuid())
  companyId  String @map("company_id")
  clientName String @map("client_name")
  docType    String @map("doc_type")

  // Arquivo no banco (BYTEA)
  fileName   String @map("file_name")
  fileMime   String @map("file_mime")
  fileSize   Int    @map("file_size")
  fileSha256 String @map("file_sha256")
  fileData   Bytes  @map("file_data")

  issueDate DateTime? @map("issue_date")
  expiresAt DateTime? @map("expires_at")
  notes     String?
  version   Int       @default(1)
  createdAt DateTime  @default(now()) @map("created_at")

  company Company @relation(fields: [companyId], references: [id])

  @@index([companyId, expiresAt])
}

model Licitacao {
  id                 String          @id @default(uuid())
  companyId          String          @map("company_id")
  title              String
  status             LicitacaoStatus
  editalUrl          String?         @map("edital_url")
  sessionDate        DateTime?       @map("session_date")
  submissionDeadline DateTime?       @map("submission_deadline")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  company   Company             @relation(fields: [companyId], references: [id])
  documents LicitacaoDocument[]
  events    LicitacaoEvent[]
}

model LicitacaoDocument {
  id          String  @id @default(uuid())
  licitacaoId String  @map("licitacao_id")
  name        String
  docType     String?
  required    Boolean @default(true)
  submitted   Boolean @default(false)
  signed      Boolean @default(false)

  fileName   String? @map("file_name")
  fileMime   String? @map("file_mime")
  fileSize   Int?    @map("file_size")
  fileSha256 String? @map("file_sha256")
  fileData   Bytes?  @map("file_data")

  issueDate DateTime? @map("issue_date")
  expiresAt DateTime? @map("expires_at")
  notes     String?

  licitacao Licitacao @relation(fields: [licitacaoId], references: [id])

  // NÃO TER unique aqui
  @@index([licitacaoId, name]) // (opcional, mas útil para filtrar/ordenar)
}

model LicitacaoEvent {
  id          String   @id @default(uuid())
  licitacaoId String   @map("licitacao_id")
  type        String
  payload     Json
  createdById String   @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at")

  licitacao Licitacao @relation(fields: [licitacaoId], references: [id])
}

model CarBrand {
  id     String         @id @default(uuid())
  name   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id      String @id @default(uuid())
  brandId String @map("brand_id")
  name    String
  specs   Json

  brand CarBrand @relation(fields: [brandId], references: [id])
}
