generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AppUser {
  id               String           @id @default(cuid())
  authUserId       String?          @unique @map("auth_user_id") @db.Uuid
  fullName         String?
  email            String           @unique
  passwordHash     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdCompanies Company[]        @relation("CompanyCreatedBy")
  memberships      CompanyMember[]
  events           LicitacaoEvent[]

  @@index([createdAt])
  @@map("app_users")
}

model Company {
  id             String            @id @default(cuid())
  name           String
  cnpj           String?           @unique
  phone          String?
  address        String?
  logoPath       String?
  letterheadPath String?
  active         Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdById    String            @map("created_by_id")
  createdBy      AppUser           @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  documents      CompanyDocument[]
  members        CompanyMember[]
  licitacoes     Licitacao[]

  @@index([createdById])
  @@index([createdAt])
  @@map("companies")
}

model CompanyMember {
  id        String      @id @default(cuid())
  companyId String      @map("company_id")
  userId    String      @map("user_id")
  role      RoleCompany @default(MEMBER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      AppUser     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId])
  @@index([role])
  @@index([createdAt])
  @@map("company_members")
}

model CompanyDocument {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  name      String
  type      String
  docType   String   // Mudado de enum para string para permitir formato "Cliente - Tipo"
  docNumber String?
  issuer    String?
  issueDate DateTime?
  expiresAt DateTime?
  filePath  String?
  notes     String?
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, docType, version])
  @@index([companyId, docType])
  @@index([expiresAt])
  @@map("company_documents")
}

model Licitacao {
  id                 String              @id @default(cuid())
  companyId          String              @map("company_id")
  title              String
  orgao              String?
  modalidade         String?
  editalUrl          String?
  sessionAt          DateTime?
  submissionDeadline DateTime?
  status             LicitacaoStatus     @default(DRAFT)
  saleValue          Decimal?            @db.Decimal(12, 2)
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  documents          LicitacaoDocument[]
  events             LicitacaoEvent[]
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt])
  @@index([status])
  @@index([submissionDeadline])
  @@map("licitacoes")
}

model LicitacaoDocument {
  id                    String           @id @default(cuid())
  licitacaoId           String           @map("licitacao_id")
  name                  String
  type                  String
  docType               LicitacaoDocType
  required              Boolean          @default(true)
  submitted             Boolean          @default(false)
  signed                Boolean          @default(false)
  issueDate             DateTime?
  expiresAt             DateTime?
  filePath              String?
  generatedFromTemplate Boolean          @default(false)
  templatePath          String?
  version               Int              @default(1)
  notes                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  licitacao             Licitacao        @relation(fields: [licitacaoId], references: [id], onDelete: Cascade)

  @@unique([licitacaoId, docType, version])
  @@index([licitacaoId, docType])
  @@index([expiresAt])
  @@map("licitacao_documents")
}

model LicitacaoEvent {
  id          String           @id @default(cuid())
  licitacaoId String           @map("licitacao_id")
  title       String
  eventDate   DateTime         @default(now())
  oldStatus   LicitacaoStatus?
  newStatus   LicitacaoStatus?
  description String?
  createdById String?          @map("created_by_id")
  createdBy   AppUser?         @relation(fields: [createdById], references: [id])
  licitacao   Licitacao        @relation(fields: [licitacaoId], references: [id], onDelete: Cascade)

  @@index([licitacaoId, eventDate])
  @@index([newStatus])
  @@map("licitacao_events")
}

enum RoleCompany {
  OWNER
  ADMIN
  MEMBER
}

enum LicitacaoStatus {
  DRAFT
  OPEN
  CLOSED
  CANCELLED
  AWARDED
}

enum CompanyDocType {
  CNPJ
  CERTIDAO
  PROCURACAO
  INSCRICAO_ESTADUAL
  OUTRO
}

enum LicitacaoDocType {
  EDITAL
  ANEXO
  ADITIVO
  OUTROS
  PROPOSTA
  HABILITACAO
}
