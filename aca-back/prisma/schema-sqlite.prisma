// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RoleCompany {
  owner
  admin
  member
}

enum LicitacaoStatus {
  draft
  open
  closed
  cancelled
  awarded
}

enum CompanyDocType {
  cnpj
  certidao
  procuracao
  outro
}

enum LicitacaoDocType {
  proposta
  habilitacao
  contrato
  outro
}

model AppUser {
  id           String   @id @default(cuid())
  authUserId   String?  @map("auth_user_id") @unique
  fullName     String?
  email        String   @unique
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdCompanies Company[] @relation("CompanyCreatedBy")
  memberships      CompanyMember[]
  events           LicitacaoEvent[]

  @@map("app_users")
  @@index([createdAt])
}

model Company {
  id             String   @id @default(cuid())
  name           String
  cnpj           String?  @unique
  phone          String?
  address        String?
  logoPath       String?
  letterheadPath String?
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  createdById String   @map("created_by_id")
  createdBy   AppUser  @relation("CompanyCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  members     CompanyMember[]
  documents   CompanyDocument[]
  licitacoes Licitacao[]

  @@map("companies")
  @@index([createdById])
  @@index([createdAt])
}

model CompanyMember {
  id        String      @id @default(cuid())
  companyId String      @map("company_id")
  userId    String      @map("user_id")
  role      RoleCompany @default(member)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    AppUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Unique constraint: one user can only be member of one company
  @@unique([companyId, userId])
  @@map("company_members")
  @@index([role])
  @@index([createdAt])
}

model CompanyDocument {
  id          String        @id @default(cuid())
  companyId   String        @map("company_id")
  docType     CompanyDocType
  docNumber   String?
  issuer      String?
  issueDate   DateTime?
  expiresAt   DateTime?
  filePath    String?
  notes       String?
  version     Int           @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_documents")
  @@unique([companyId, docType, version])
  @@index([companyId, docType])
  @@index([expiresAt])
}

model Licitacao {
  id                 String          @id @default(cuid())
  companyId          String          @map("company_id")
  title              String
  orgao              String?
  modalidade         String?
  editalUrl          String?
  sessionAt          DateTime?
  submissionDeadline DateTime?
  status             LicitacaoStatus @default(draft)
  saleValue          Float?
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relations
  company   Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents LicitacaoDocument[]
  events    LicitacaoEvent[]

  @@map("licitacoes")
  @@index([companyId, createdAt])
  @@index([status])
  @@index([submissionDeadline])
}

model LicitacaoDocument {
  id                    String            @id @default(cuid())
  licitacaoId           String            @map("licitacao_id")
  docType               LicitacaoDocType
  required              Boolean           @default(true)
  submitted             Boolean           @default(false)
  signed                Boolean           @default(false)
  issueDate             DateTime?
  expiresAt             DateTime?
  filePath              String?
  generatedFromTemplate Boolean           @default(false)
  templatePath          String?
  version               Int               @default(1)
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  licitacao Licitacao @relation(fields: [licitacaoId], references: [id], onDelete: Cascade)

  @@map("licitacao_documents")
  @@unique([licitacaoId, docType, version])
  @@index([licitacaoId, docType])
  @@index([expiresAt])
}

model LicitacaoEvent {
  id          String          @id @default(cuid())
  licitacaoId String          @map("licitacao_id")
  eventAt     DateTime        @default(now())
  oldStatus   LicitacaoStatus?
  newStatus   LicitacaoStatus?
  description String?
  createdById String?         @map("created_by_id")

  // Relations
  licitacao Licitacao @relation(fields: [licitacaoId], references: [id], onDelete: Cascade)
  createdBy AppUser?  @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("licitacao_events")
  @@index([licitacaoId, eventAt])
  @@index([newStatus])
}
